#!/bin/bash

readonly PROGNAME="$(basename "$0")"

case "$OSTYPE" in
    *darwin*)
        BSD=1
        ;;
    *linux*)
        GNU=2
        ;;
esac


[[ $TRACE ]] && set -x

function errcho() {
    echo "$@" >&2
}

function usage() {
    errcho -e "$PROGNAME [bcelm] <source>

<source>
    either a url to a remote git repo or a path to a local git repo

Clones the <source> git repo temporarily if remote and performs the options on it

Options
    -c
        use caching (clones the repo to a permanent cache directory 
        /tmp/supertramp/cache), use this option to speed up supsequent builds

    -b [<branch>]
        checkout the remote at source at <branch>
    
    -e [<env_file1>,<env_file2>,...<env_fileN>]
        load the contents of these env files into memory before executing commands

    -l [<log-path>]
        store output of make commands to <log-path>

    -m [<command1>,<command2>,...,<commandN>]
        extra make commands to run 

Examples:
    supertramp -m \"build,deploy\" https://owiewestside:$GITHUB_TOKEN@github.com/owenstranathan/supertramp
        clone and run make [build and deploy in that order]
"
}

function parse_args() {
    MAKE_COMMANDS=()
    ENV_FILES=()
    REVISION="HEAD"
    while getopts ":cb:e:l:m:r:" option; do
        case $option in 
            b) # Branch
                BRANCH="$OPTARG"
                ;;
            c) # Cache
                CACHE_SOURCE=true
                ;;
            e) # Env file
                SAVE_IFS=$IFS
                IFS=','
                for env_file in $OPTARG; do
                    ENV_FILES+=("$env_file")
                done
                IFS=$SAVE_IFS
                ;;
            l) # Log
                LOG_PATH="$OPTARG"
                ;;
            m) # make command
                SAVE_IFS=$IFS
                IFS=','
                for command in $OPTARG; do
                MAKE_COMMANDS+=("$command")
                done
                IFS=$SAVE_IFS
                ;;
            r)
                REVISION="$OPTARG"
                ;;
            *)
                usage
                exit 1
                ;;
        esac
    done
    shift $((OPTIND-1))
    if [[ ! "$1" ]]; then
        usage
        exit 1
    fi
    SOURCE="$1"
}

function do_clone() {
    if [[ "$BRANCH" ]]; then
        git clone -b "$BRANCH" "$SOURCE" "$DIR"
    else
        git clone "$SOURCE" "$DIR"
    fi
}

function do_checkout() {
    if [[ "$BRANCH" ]]; then
        git -C "$DIR" checkout "$BRANCH"
    fi
}

function load_env_file() {
    local env_file="$1"
    if [[ -f "$env_file" ]]; then
        echo "Loading $env_file environment variables"
        local variables
        if [[ "$BSD" ]]; then
            variables=$(grep -v '^#' "$env_file" | xargs -0)
        else
            variables=$(grep -v '^#' "$env_file" | xargs -d '\n')
        fi
        for var in $variables; do
            export "${var?}"
        done
    fi
}

function main() {
    SOURCE_NAME="$(basename "$SOURCE")"

    if [[ "$SOURCE" =~ (git@|http:\/\/|https:\/\/)(github.com)(:|\/)(.*)(\/)(.*).?($|git$)? ]]; then
        REMOTE=true
        if [[ ! $CACHE_SOURCE ]]; then
            DIR="$(mktemp -d)"
            trap "rm -rf $DIR" INT TERM EXIT
            echo "Using temporary directory $DIR."
            echo "It will be deleted when I'm done (use -c to use caching)" 
        else
            DIR="/tmp/supertramp/$SOURCE_NAME"
            if [ -d "$DIR" ]; then
                echo "Using cached $DIR"
            fi
            mkdir -p "$DIR"
        fi
    elif [ -d "$SOURCE" ]; then
        REMOTE=false
    else
        errcho "Invalid source!"
        exit 1
    fi

    if [[ "$REMOTE" == true ]]; then
        if [[ ! "$CACHE_SOURCE" ]]; then
            do_clone
        else
            if [[ -d "$DIR/.git" ]]; then
                git -C "$DIR" reset --hard HEAD
                do_checkout
            else
                do_clone
            fi
        fi
    else
        do_checkout
    fi

    git -C "$DIR" pull --rebase;
    git -C "$DIR" reset --hard "$REVISION"

    load_env_file "$DIR/.env"
    for ENV_FILE in "${ENV_FILES[@]}"; do
        load_env_file "$ENV_FILE"
    done

    for COMMAND in "${MAKE_COMMANDS[@]}"; do
        make "$COMMAND" -C "$DIR"
    done
}

parse_args "$@"    
if [[ "$LOG_PATH" ]]; then
    main 2>&1 | tee "$LOG_PATH"
else
    main
fi